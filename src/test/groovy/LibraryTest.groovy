/*
 * This Spock specification was generated by the Gradle 'init' task.
 */

import okhttp3.OkHttpClient
import okhttp3.Request
import okreplay.MatchRules
import okreplay.OkReplayConfig
import okreplay.OkReplayInterceptor
import okreplay.Recorder
import okreplay.TapeMode
import spock.lang.Shared
import spock.lang.Specification
import sun.security.provider.SHA

class LibraryTest extends Specification {
    @Shared
    OkReplayInterceptor okReplayInterceptor = new OkReplayInterceptor();

    @Shared
    OkReplayConfig configuration = new OkReplayConfig.Builder()
            .tapeRoot(new File("build"))
            .defaultMode(TapeMode.READ_WRITE)
            .sslEnabled(true)
            .interceptor(okReplayInterceptor)
            .defaultMatchRules(MatchRules.host, MatchRules.path, MatchRules.method)
            .build()
    @Shared
    def recorder = new Recorder(configuration)

    def "recording google.com"() {
        setup:
        OkHttpClient client = new OkHttpClient.Builder()
                .addInterceptor(okReplayInterceptor)
                .build()



        when:
        def id = UUID.randomUUID().toString()
        recorder.start("tape-$id")
        def call = client.newCall(new Request(new Request.Builder().url("https://google.com").get()))
        def realResponse = call.execute()
        def realBody = realResponse.body().string()


        def call2 = client.newCall(new Request(new Request.Builder().url("https://google.com").get()))
        def tapeResponse = call2.execute()
        def tapeBody = tapeResponse.body().string()

        recorder.stop()

        then:
        realBody == tapeBody
        realResponse.header("Date") == tapeResponse.header("Date")

    }
}
